
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 1
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer CEvaluationFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file; 

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *CEvaluationalloc (yy_size_t  );
void *CEvaluationrealloc (void *,yy_size_t  );
void CEvaluationfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include "copasi/FlexLexer.h"

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 83
#define YY_END_OF_BUFFER 84
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[402] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,   84,   82,
       81,   81,    8,   82,   75,   78,   66,   77,   65,    1,
        1,   82,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   82,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   76,   79,   82,   70,   82,   68,   73,   74,
       69,   10,   82,   12,   82,   82,   82,   82,   82,   82,
       82,   67,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   80,   80,   81,    0,   80,    0,    1,
        1,    0,    0,    0,   20,    0,   64,   80,   80,   80,

       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,    3,   80,
       80,   80,   80,   80,   80,   80,    0,    0,   19,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   13,   15,    9,   14,   11,
        0,   12,   10,   18,    0,    0,    0,    0,    0,    0,
       80,   80,    1,    0,    1,   21,   63,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   62,   80,   80,   80,   80,    7,   80,    8,

       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   16,    0,   71,    0,   51,   80,   80,
       80,   80,   80,   80,   80,   26,   80,   30,   80,   29,
       80,   80,   24,   80,   80,   80,   80,   80,   80,   22,
       80,   59,   60,   80,   80,   28,   80,   80,   25,   80,
       80,   27,   80,    4,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,    0,
       72,   38,   80,   80,   80,   80,   80,   37,   39,   53,

       32,   36,   35,   80,   80,   80,    5,   80,   80,   80,
       80,   80,   80,   34,   49,   31,   50,   33,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
        0,   80,   80,   80,   80,   80,   80,   61,   80,   80,
       52,   56,   80,   23,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,    0,   80,
       42,   80,   41,   80,   40,   80,   80,   80,   80,   80,
       80,   58,   80,   80,   80,   80,   80,   17,   44,   48,
       47,   46,   43,   45,   80,   80,    6,   57,   55,   80,
       80,   80,   80,   80,   80,   54,   80,   80,   80,    2,

        0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    7,    1,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       18,   18,   18,   18,   18,   18,   18,    1,    1,   19,
       20,   21,    1,    1,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   31,   31,   42,   43,   31,
       44,   45,   46,   47,   31,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   31,   31,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   31,   31,   67,
       68,   31,   69,   70,   71,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[72] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    1,    1,
        1
    } ;

static yyconst flex_uint16_t yy_base[407] =
    {   0,
        0,    0,    0,    0,   71,    0,  139,  140,  839,  840,
      143,  145,  840,  144,  840,  840,  840,  840,  840,  140,
      145,  134,  162,  830,  152,  156,  161,  172,  159,  182,
      160,  188,  197,  176,  200,  205,  180,  130,  175,  169,
      204,  164,  207,  209,  212,  185,  214,  215,  220,  226,
      233,  227,  840,  840,  817,  840,  829,  840,  840,  840,
      840,  815,  814,  813,  798,  794,  210,  218,  804,  791,
      793,  840,  768,  764,  194,  767,  195,  764,  771,  759,
      755,  760,  749,  244,  241,  251,  246,  810,  814,  251,
      276,  293,    0,  227,  840,  813,  806,  806,  234,  277,

      275,  287,  276,  289,  292,  297,  305,  279,  306,  299,
      300,  805,  308,  312,  310,  314,  315,  316,  804,  317,
      318,  331,  319,  321,  328,  333,  298,  808,  840,  337,
      338,  342,  343,  345,  350,  352,  353,  354,  358,  363,
      362,  356,  359,  364,  360,  365,  366,  367,  370,  371,
      369,  368,  374,  372,  373,  840,  840,  840,  840,  840,
      785,  840,  840,  840,  771,  757,  746,  755,  745,  741,
      377,  376,  418,  370,  373,    0,  840,  795,  401,  429,
      433,  437,  375,  434,  435,  443,  386,  438,  439,  441,
      440,  444,  793,  446,  387,  793,  792,  791,  448,  790,

      447,  449,  450,  453,  451,  454,  466,  458,  442,  452,
      479,  480,  457,  481,  482,  485,  486,  487,  488,  490,
      489,  492,  495,  388,  497,  493,  491,  499,  501,  496,
      504,  500,  507,  840,  740,  840,  731,  786,  786,  527,
      502,  503,  785,  784,  783,  781,  781,  779,  779,  777,
      777,  505,  775,  510,  533,  516,  525,  521,  511,  774,
      394,  773,  772,  556,  557,  771,  771,  770,  768,  768,
      767,  765,  765,  764,  559,  512,  518,  523,  513,  514,
      515,  561,  519,  569,  571,  572,  575,  522,  576,  715,
      840,  761,  579,  577,  581,  582,  587,  760,  759,  758,

      757,  756,  755,  755,  583,  584,  754,  753,  752,  585,
      751,  592,  590,  749,  748,  747,  746,  745,  589,  591,
      594,  595,  598,  599,  596,  600,  603,  604,  602,  606,
      701,  612,  618,  620,  621,  623,  624,  743,  626,  634,
      742,  728,  625,  726,  726,  632,  635,  627,  629,  630,
      631,  638,  643,  646,  659,  662,  663,  665,  668,  721,
      717,  717,  715,  713,  711,  711,  710,  708,  664,  666,
      667,  705,  705,  701,  668,  669,  670,  840,  699,  697,
      693,  691,  690,  688,  671,  675,  688,  686,  391,  672,
      673,  681,  389,  683,  679,  265,  682,  686,  684,  253,

      840,  739,  742,  744,  747,  162
    } ;

static yyconst flex_int16_t yy_def[407] =
    {   0,
      401,    1,    1,    1,  401,    5,    1,    1,  401,  401,
      401,  401,  401,  402,  401,  401,  401,  401,  401,  401,
      401,  403,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  405,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  404,  404,  401,  402,  401,  402,  401,
      401,  401,  406,  403,  401,  403,  401,  404,  404,  404,

      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  405,  405,  401,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      404,  404,  401,  401,  401,  406,  401,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  401,  404,  404,  404,  404,  404,  404,  404,

      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  401,  401,  401,  401,  401,  404,  404,
      404,  404,  404,  404,  404,  401,  404,  401,  404,  401,
      404,  404,  401,  404,  404,  404,  404,  404,  404,  401,
      404,  401,  401,  404,  404,  401,  404,  404,  401,  404,
      404,  401,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  401,
      401,  401,  404,  404,  404,  404,  404,  401,  401,  401,

      401,  401,  401,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  401,  401,  401,  401,  401,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      401,  404,  404,  404,  404,  404,  404,  401,  404,  404,
      401,  401,  404,  401,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  401,  404,
      401,  404,  401,  404,  401,  404,  404,  404,  404,  404,
      404,  401,  404,  404,  404,  404,  404,  401,  401,  401,
      401,  401,  401,  401,  404,  404,  404,  401,  401,  404,
      404,  404,  404,  404,  404,  401,  404,  404,  404,  404,

        0,  401,  401,  401,  401,  401
    } ;

static yyconst flex_uint16_t yy_nxt[912] =
    {   0,
       10,   11,   12,   13,   14,   10,   10,   15,   16,   10,
       17,   18,   19,   10,   10,   20,   21,   21,   22,   10,
       10,   23,   24,   25,   26,   27,   28,   29,   24,   30,
       24,   31,   32,   33,   24,   34,   24,   24,   35,   36,
       37,   24,   24,   38,   10,   10,   10,   39,   24,   40,
       41,   42,   43,   44,   24,   45,   46,   47,   48,   24,
       49,   24,   24,   50,   51,   52,   24,   24,   53,   10,
       54,   10,   11,   12,   55,   10,   56,   57,   15,   16,
       58,   59,   18,   60,   10,   61,   10,   10,   10,   62,
       63,   64,   65,   10,   10,   10,   66,   10,   67,   10,

       10,   10,   68,   10,   69,   70,   10,   10,   10,   10,
       10,   10,   71,   10,   10,   10,   10,   72,   73,   10,
       10,   10,   74,   10,   75,   10,   76,   77,   78,   79,
       80,   10,   81,   10,   10,   10,   10,   82,   10,   53,
       83,   54,   10,   10,   86,   86,   86,   86,   88,   10,
       10,   10,   10,   90,   95,   91,   91,   91,   90,   97,
       91,   91,   91,   97,  176,   92,   97,   97,   97,   97,
       92,   97,   84,   84,  128,  129,   97,  104,   96,   97,
      111,  107,   97,   97,   99,  100,  105,   97,   89,   97,
      106,   92,   97,  109,  114,   97,   92,   85,   85,  101,

      102,  103,  108,  110,   97,  119,   93,   97,  112,  115,
      120,   97,   97,  126,   97,  113,   97,  116,  117,   97,
      135,   97,   97,  130,  131,  121,  124,   97,  136,  122,
      139,  118,  137,   97,   97,  160,  123,  132,  133,  134,
       97,   97,  125,  158,  144,  160,  158,   95,   97,  162,
       88,   97,   86,   86,  140,  138,  142,  163,  162,  163,
       97,  145,  147,  141,  112,  117,  173,  173,  173,  146,
      143,   96,  178,  177,  148,  119,   92,  150,  171,  149,
      153,  151,   97,   97,   97,  155,   97,  152,  147,   90,
       89,   91,   91,   91,   97,  154,   97,  182,  180,   97,

      172,   92,   92,  174,   97,  174,   97,   97,  175,  175,
      175,  179,   97,   97,  188,   97,  181,   97,  183,   97,
      186,   97,   97,   97,   97,   97,   97,   92,   97,  189,
      184,  185,  192,  191,  194,   97,  187,  190,   97,  195,
       97,  202,  128,  129,   97,   97,  201,  197,  198,   97,
       97,  196,   97,  199,  206,  200,  205,   97,  203,   97,
       97,   97,  208,   97,  204,   97,   97,   97,  207,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,  175,  175,  175,  175,  175,
      175,  210,  212,   97,  260,  260,  396,  209,  211,  177,

      178,   97,  216,  261,  286,  213,  245,  252,   97,  311,
      217,  223,  219,  222,  199,  214,  215,  224,  218,  220,
      227,  221,  228,  197,  198,  226,  196,  229,  233,  225,
      230,  200,  231,  173,  173,  173,   97,  232,  225,  239,
       97,  246,  248,   92,   97,  253,   97,   97,   97,   97,
      250,   97,  240,   97,   97,   97,  266,   97,   97,   97,
      269,  272,  247,  249,   97,   97,  243,  241,  242,   92,
      244,  251,  254,   97,  257,  259,  258,  267,  255,  256,
      264,  270,  273,  268,  275,  265,   97,   97,  246,  248,
      271,  274,  250,   97,  253,   97,   97,   97,  266,   97,

       97,  276,   97,   97,   97,  239,   97,   97,  269,   97,
       97,  272,   97,  245,   97,  277,  278,   97,   97,   97,
       97,   97,   97,   97,  297,   97,   97,  295,   97,   97,
       97,  296,   97,  279,   97,  247,  249,  243,  244,  251,
       97,  307,  309,  305,  310,  267,  280,  304,  283,  284,
      285,  274,  281,  282,  287,  270,  288,  268,  273,  289,
      271,  293,  308,   97,   97,  294,   97,  306,   97,  322,
      324,  320,  325,  323,  326,  321,   97,  312,   97,   97,
      304,  308,   97,   97,   97,  329,   97,  311,   97,   97,
       97,   97,   97,  319,   97,  313,   97,   97,   97,   97,

      334,   97,   97,   97,  335,   97,   97,   97,  339,   97,
       97,   97,  307,   97,  343,  336,  309,  332,  333,   97,
      337,  340,  328,  345,  346,  361,  347,  363,  365,  327,
       97,   97,   97,   97,   97,  330,  361,  363,  365,   97,
      360,   97,   97,  350,  351,   97,  362,  354,  364,  366,
       97,  367,  368,   97,  348,  349,  352,  353,  356,  369,
      345,  357,  355,  370,  371,  373,   97,  374,  358,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,  360,   97,  362,  364,  366,   97,  386,   97,   97,
       97,   97,  367,   97,  177,   97,  177,  368,  177,  177,

      392,  177,  395,  385,  375,  177,  393,  177,  389,  387,
      398,  400,  388,  177,  376,  384,  391,  383,  382,  177,
      381,  373,  374,  177,  380,  177,  377,  394,  379,  393,
      397,  378,  390,  372,  177,  400,  177,  387,  399,   87,
       87,   87,   94,   94,   94,   98,   98,  127,  127,  127,
      177,  177,  359,  177,  177,  177,  177,  177,  344,  342,
      341,   97,  338,  177,  177,  177,  177,  177,  177,  177,
      331,   97,  318,  177,  317,  316,  177,  315,  314,  177,
      177,  177,  177,  177,  303,  177,  302,  177,  301,  177,
      300,  299,  298,  292,  177,  291,  290,   97,   97,  263,

      262,  177,  238,  234,  237,  236,  235,  157,  234,  157,
      401,   97,  193,   97,  177,  401,  401,   97,  164,  170,
      169,  164,  156,  168,  167,  159,  166,  165,  164,  156,
      159,  161,  160,  159,  158,  157,  156,   97,  401,    9,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,

      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401
    } ;

static yyconst flex_int16_t yy_chk[912] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    7,    8,   11,   11,   12,   12,   14,    7,
        8,    7,    8,   20,   22,   20,   20,   20,   21,   25,
       21,   21,   21,   26,  406,   20,   29,   31,   27,   23,
       21,   42,    7,    8,   38,   38,   40,   25,   22,   28,
       29,   26,   39,   34,   23,   23,   25,   37,   14,   30,
       25,   20,   46,   28,   31,   32,   21,    7,    8,   23,

       23,   23,   27,   28,   33,   34,   20,   35,   30,   32,
       34,   41,   36,   37,   43,   30,   44,   32,   33,   45,
       40,   47,   48,   39,   39,   35,   36,   49,   40,   35,
       42,   33,   40,   50,   52,   67,   35,   39,   39,   39,
       51,   99,   36,   68,   46,   75,   77,   94,   85,   67,
       87,   84,   86,   86,   43,   41,   44,   68,   75,   77,
      400,   47,   48,   43,   45,   84,   90,   90,   90,   47,
       45,   94,   99,  396,   48,   49,   90,   50,   84,   49,
       51,   50,  101,  103,  100,   52,  108,   50,   85,   91,
       87,   91,   91,   91,  102,   51,  104,  103,  101,  105,

       85,   91,   90,   92,  106,   92,  110,  111,   92,   92,
       92,  100,  107,  109,  108,  113,  102,  115,  104,  114,
      106,  116,  117,  118,  120,  121,  123,   91,  124,  109,
      105,  105,  111,  110,  113,  125,  107,  109,  122,  114,
      126,  121,  127,  127,  130,  131,  120,  116,  117,  132,
      133,  115,  134,  118,  124,  118,  123,  135,  122,  136,
      137,  138,  126,  142,  122,  139,  143,  145,  125,  141,
      140,  144,  146,  147,  148,  152,  151,  149,  150,  154,
      155,  153,  183,  172,  171,  174,  174,  174,  175,  175,
      175,  132,  134,  187,  195,  224,  393,  131,  133,  389,

      130,  261,  137,  195,  224,  135,  183,  187,  179,  261,
      138,  143,  140,  142,  171,  136,  136,  144,  139,  140,
      150,  141,  151,  146,  147,  149,  145,  151,  155,  148,
      152,  148,  153,  173,  173,  173,  180,  154,  172,  179,
      181,  184,  185,  173,  182,  188,  189,  191,  190,  209,
      186,  192,  180,  194,  201,  199,  202,  203,  205,  210,
      204,  206,  184,  185,  213,  208,  181,  180,  180,  173,
      182,  186,  188,  207,  191,  194,  192,  202,  189,  190,
      199,  204,  206,  203,  208,  201,  211,  212,  214,  215,
      205,  207,  216,  217,  218,  219,  221,  220,  227,  222,

      226,  210,  223,  230,  225,  209,  228,  232,  229,  241,
      242,  231,  252,  213,  233,  210,  210,  254,  259,  276,
      279,  280,  281,  256,  242,  277,  283,  241,  258,  288,
      278,  241,  257,  217,  240,  214,  215,  211,  212,  216,
      255,  256,  258,  254,  259,  227,  218,  252,  221,  222,
      223,  232,  219,  220,  225,  229,  226,  228,  231,  233,
      230,  240,  257,  264,  265,  240,  275,  255,  282,  277,
      278,  276,  280,  277,  281,  276,  284,  264,  285,  286,
      279,  283,  287,  289,  294,  288,  293,  286,  295,  296,
      305,  306,  310,  275,  297,  265,  319,  313,  320,  312,

      294,  321,  322,  325,  295,  323,  324,  326,  305,  329,
      327,  328,  282,  330,  310,  296,  284,  293,  293,  332,
      297,  306,  287,  312,  313,  333,  319,  334,  335,  285,
      336,  337,  343,  339,  348,  289,  349,  350,  351,  346,
      332,  340,  347,  321,  322,  352,  333,  325,  334,  335,
      353,  336,  337,  354,  320,  320,  323,  324,  327,  339,
      328,  329,  326,  340,  343,  346,  355,  347,  330,  356,
      357,  369,  358,  370,  371,  375,  376,  377,  385,  390,
      391,  348,  386,  349,  350,  351,  395,  370,  392,  397,
      394,  399,  352,  398,  388,  387,  384,  353,  383,  382,

      385,  381,  392,  369,  354,  380,  386,  379,  374,  371,
      395,  398,  373,  372,  355,  368,  376,  367,  366,  365,
      364,  357,  358,  363,  362,  361,  356,  390,  360,  391,
      394,  359,  375,  345,  344,  399,  342,  377,  397,  402,
      402,  402,  403,  403,  403,  404,  404,  405,  405,  405,
      341,  338,  331,  318,  317,  316,  315,  314,  311,  309,
      308,  307,  304,  303,  302,  301,  300,  299,  298,  292,
      290,  274,  273,  272,  271,  270,  269,  268,  267,  266,
      263,  262,  260,  253,  251,  250,  249,  248,  247,  246,
      245,  244,  243,  239,  238,  237,  235,  200,  198,  197,

      196,  193,  178,  170,  169,  168,  167,  166,  165,  161,
      128,  119,  112,   98,   97,   96,   89,   88,   83,   82,
       81,   80,   79,   78,   76,   74,   73,   71,   70,   69,
       66,   65,   64,   63,   62,   57,   55,   24,    9,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,

      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"
/* scanner for kinetic functions */

#line 10 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"
#include <vector>

#include "copasi/copasi.h"
#include "copasi/function/CEvaluationNode.h"
#include "copasi/function/CEvaluationLexer.h"
#include "copasi/function/CEvaluationParser_yacc.hpp"

#ifndef YYERRCODE
#define YYERRCODE 256
#endif

#define YY_USER_INIT \
    mpNode = NULL;\
    mPosition = 0;\
    mpNodeList = new std::vector< CEvaluationNode * >;

#define COMMON_ACTION \
    mPosition += yyleng;\
    mpNodeList->push_back(mpNode);

#line 763 "<stdout>"

#define INITIAL 0
#define sSIGNorVALUE 1
#define sOPERATOR 2
#define sVALUE 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 36 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

#line 900 "<stdout>"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 402 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 401 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 37 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sOPERATOR); 
  mpNode = new CEvaluationNodeNumber(CEvaluationNode::SubType::DOUBLE,
                                     yytext);
  COMMON_ACTION;
  return TOKEN_NUMBER;

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 45 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sOPERATOR); 
  mpNode = new CEvaluationNodeConstant(CEvaluationNode::SubType::EXPONENTIALE,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_NUMBER;

	YY_BREAK
case 3:
YY_RULE_SETUP
#line 53 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sOPERATOR); 
  mpNode = new CEvaluationNodeConstant(CEvaluationNode::SubType::PI,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_NUMBER;

	YY_BREAK
case 4:
YY_RULE_SETUP
#line 61 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sOPERATOR); 
  mpNode = new CEvaluationNodeConstant(CEvaluationNode::SubType::True,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_LOGICAL_VALUE;

	YY_BREAK
case 5:
YY_RULE_SETUP
#line 69 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sOPERATOR); 
  mpNode = new CEvaluationNodeConstant(CEvaluationNode::SubType::False,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_LOGICAL_VALUE;

	YY_BREAK
case 6:
YY_RULE_SETUP
#line 77 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sOPERATOR); 
  mpNode = new CEvaluationNodeConstant(CEvaluationNode::SubType::Infinity,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_NUMBER;

	YY_BREAK
case 7:
YY_RULE_SETUP
#line 85 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sOPERATOR); 
  mpNode = new CEvaluationNodeConstant(CEvaluationNode::SubType::NaN,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_NUMBER;

	YY_BREAK
case 8:
YY_RULE_SETUP
#line 93 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sVALUE); 
  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::NOT,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_LOGICAL_NOT;

	YY_BREAK
case 9:
YY_RULE_SETUP
#line 101 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sSIGNorVALUE); 
  mpNode = new CEvaluationNodeLogical(CEvaluationNode::SubType::LE,
                                      yytext);
  COMMON_ACTION;
  return TOKEN_LOGICAL_LE;

	YY_BREAK
case 10:
YY_RULE_SETUP
#line 109 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sSIGNorVALUE); 
  mpNode = new CEvaluationNodeLogical(CEvaluationNode::SubType::LT,
                                      yytext);
  COMMON_ACTION;
  return TOKEN_LOGICAL_LT;

	YY_BREAK
case 11:
YY_RULE_SETUP
#line 117 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sSIGNorVALUE); 
  mpNode = new CEvaluationNodeLogical(CEvaluationNode::SubType::GE,
                                      yytext);
  COMMON_ACTION;
  return TOKEN_LOGICAL_GE;

	YY_BREAK
case 12:
YY_RULE_SETUP
#line 125 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sSIGNorVALUE); 
  mpNode = new CEvaluationNodeLogical(CEvaluationNode::SubType::GT,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_LOGICAL_GT;

	YY_BREAK
case 13:
YY_RULE_SETUP
#line 133 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sSIGNorVALUE); 
  mpNode = new CEvaluationNodeLogical(CEvaluationNode::SubType::NE,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_LOGICAL_NE;

	YY_BREAK
case 14:
YY_RULE_SETUP
#line 141 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sSIGNorVALUE); 
  mpNode = new CEvaluationNodeLogical(CEvaluationNode::SubType::EQ,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_LOGICAL_EQ;

	YY_BREAK
case 15:
YY_RULE_SETUP
#line 149 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sSIGNorVALUE); 
  mpNode = new CEvaluationNodeLogical(CEvaluationNode::SubType::AND,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_LOGICAL_AND;

	YY_BREAK
case 16:
YY_RULE_SETUP
#line 157 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sSIGNorVALUE); 
  mpNode = new CEvaluationNodeLogical(CEvaluationNode::SubType::XOR,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_LOGICAL_XOR;

	YY_BREAK
case 17:
YY_RULE_SETUP
#line 165 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sSIGNorVALUE); 
  mpNode = new CEvaluationNodeLogical(CEvaluationNode::SubType::IMPLIES,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_LOGICAL_XOR;

	YY_BREAK
case 18:
YY_RULE_SETUP
#line 173 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sSIGNorVALUE); 
  mpNode = new CEvaluationNodeLogical(CEvaluationNode::SubType::OR,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_LOGICAL_OR;

	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 181 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sOPERATOR); 
  mpNode = new CEvaluationNodeUnit(CEvaluationNode::SubType::DEFAULT,
                                   yytext);
  COMMON_ACTION;
  return TOKEN_UNIT;

	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 189 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sOPERATOR); 
  mpNode = new CEvaluationNodeObject(CEvaluationNode::SubType::CN,
                                     yytext);
  COMMON_ACTION;
  return TOKEN_NUMBER;

	YY_BREAK
case 21:
YY_RULE_SETUP
#line 197 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sOPERATOR); 
  mpNode = new CEvaluationNodeObject(CEvaluationNode::SubType::POINTER,
                                     yytext);
  COMMON_ACTION;
  return TOKEN_NUMBER;

	YY_BREAK
case 22:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 205 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::LOG,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 23:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 212 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::LOG10,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 24:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 219 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::EXP,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 25:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 226 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::SIN,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 26:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 233 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::COS,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 27:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 240 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::TAN,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 28:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 247 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::SEC,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 29:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 254 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::CSC,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 30:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 261 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::COT,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 31:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 268 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::SINH,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 32:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 275 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::COSH,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 33:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 282 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::TANH,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 34:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 289 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::SECH,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 35:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 296 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::CSCH,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 36:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 303 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::COTH,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 37:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 310 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::ARCSIN,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 38:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 317 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::ARCCOS,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 39:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 324 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::ARCTAN,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 40:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 331 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::ARCSEC,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 41:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 338 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::ARCCSC,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 42:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 345 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::ARCCOT,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 43:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 352 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::ARCSINH,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 44:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 359 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::ARCCOSH,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 45:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 366 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::ARCTANH,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 46:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 373 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::ARCSECH,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 47:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 380 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::ARCCSCH,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 48:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 387 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::ARCCOTH,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 49:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 394 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::SIGN,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 50:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 401 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::SQRT,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 51:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 408 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::ABS,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 52:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 415 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::FLOOR,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 53:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 422 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::CEIL,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 54:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 429 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::FACTORIAL,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 55:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 436 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::RUNIFORM,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_2;

	YY_BREAK
case 56:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 443 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::RGAMMA,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_2;

	YY_BREAK
case 57:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 450 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::RPOISSON,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_1;

	YY_BREAK
case 58:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 457 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::RNORMAL,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_2;

	YY_BREAK
case 59:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 464 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::MAX,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION;

	YY_BREAK
case 60:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 471 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::MIN,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION;

	YY_BREAK
case 61:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 478 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeDelay(CEvaluationNode::SubType::DELAY,
                                    yytext);
  COMMON_ACTION;
  return TOKEN_FUNCTION_2;

	YY_BREAK
case 62:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 485 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mpNode = new CEvaluationNodeChoice(CEvaluationNode::SubType::IF,
                                     yytext);
  COMMON_ACTION;
  return TOKEN_LOGICAL_CHOICE;

	YY_BREAK
case 63:
/* rule 63 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 492 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

    { 
      std::string tmp(yytext);
      mpNode = new CEvaluationNodeCall(CEvaluationNode::SubType::EXPRESSION,
                                       tmp.substr(0, tmp.length() - 1));
    }
  COMMON_ACTION;
  return TOKEN_CALL;

	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 502 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

    { 
      std::string tmp(yytext);
      mpNode = new CEvaluationNodeCall(CEvaluationNode::SubType::FUNCTION,
                                       tmp.substr(0, tmp.length() - 1));
    }
  COMMON_ACTION;
  return TOKEN_CALL;

	YY_BREAK
case 65:
YY_RULE_SETUP
#line 512 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sVALUE); 
  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::MINUS,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_SIGN;

	YY_BREAK
case 66:
YY_RULE_SETUP
#line 520 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sVALUE); 
  mpNode = new CEvaluationNodeFunction(CEvaluationNode::SubType::PLUS,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_SIGN;

	YY_BREAK
case 67:
YY_RULE_SETUP
#line 528 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sSIGNorVALUE); 
  mpNode = new CEvaluationNodeOperator(CEvaluationNode::SubType::POWER,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_OPERATOR_POWER;

	YY_BREAK
case 68:
YY_RULE_SETUP
#line 536 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sSIGNorVALUE); 
  mpNode = new CEvaluationNodeOperator(CEvaluationNode::SubType::MULTIPLY,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_OPERATOR_MULTIPLY;

	YY_BREAK
case 69:
YY_RULE_SETUP
#line 544 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sSIGNorVALUE); 
  mpNode = new CEvaluationNodeOperator(CEvaluationNode::SubType::DIVIDE,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_OPERATOR_MULTIPLY;

	YY_BREAK
case 70:
YY_RULE_SETUP
#line 552 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sSIGNorVALUE); 
  mpNode = new CEvaluationNodeOperator(CEvaluationNode::SubType::MODULUS,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_OPERATOR_MODULUS;

	YY_BREAK
case 71:
YY_RULE_SETUP
#line 560 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sSIGNorVALUE); 
  mpNode = new CEvaluationNodeOperator(CEvaluationNode::SubType::REMAINDER,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_OPERATOR_REMAINDER;

	YY_BREAK
case 72:
YY_RULE_SETUP
#line 568 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sSIGNorVALUE); 
  mpNode = new CEvaluationNodeOperator(CEvaluationNode::SubType::QUOTIENT,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_OPERATOR_REMAINDER;

	YY_BREAK
case 73:
YY_RULE_SETUP
#line 576 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sSIGNorVALUE);
  mpNode = new CEvaluationNodeOperator(CEvaluationNode::SubType::PLUS,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_OPERATOR_PLUS;

	YY_BREAK
case 74:
YY_RULE_SETUP
#line 584 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sSIGNorVALUE);
  mpNode = new CEvaluationNodeOperator(CEvaluationNode::SubType::MINUS,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_OPERATOR_PLUS;

	YY_BREAK
case 75:
YY_RULE_SETUP
#line 592 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sSIGNorVALUE); 
  mPosition += yyleng;
  // mpNode = new CEvaluationNodeStructure(CEvaluationNode::SubType::OPEN,
  //                                       yytext);
  // COMMON_ACTION;
  return TOKEN_STRUCTURE_OPEN;

	YY_BREAK
case 76:
YY_RULE_SETUP
#line 601 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sSIGNorVALUE); 
  mPosition += yyleng;
  // mpNode = new CEvaluationNodeStructure(CEvaluationNode::SubType::VECTOR_OPEN,
  //                                       yytext);
  // COMMON_ACTION;
  return TOKEN_STRUCTURE_VECTOR_OPEN;

	YY_BREAK
case 77:
YY_RULE_SETUP
#line 610 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sSIGNorVALUE); 
  mPosition += yyleng;
  // mpNode = new CEvaluationNodeStructure(CEvaluationNode::SubType::COMMA,
  //                                       yytext);
  // COMMON_ACTION;
  return TOKEN_STRUCTURE_COMMA;

	YY_BREAK
case 78:
YY_RULE_SETUP
#line 619 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sOPERATOR); 
  mPosition += yyleng;
  // mpNode = new CEvaluationNodeStructure(CEvaluationNode::SubType::CLOSE,
  //                                       yytext);
  // COMMON_ACTION;
  return TOKEN_STRUCTURE_CLOSE;

	YY_BREAK
case 79:
YY_RULE_SETUP
#line 628 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sOPERATOR); 
  mPosition += yyleng;
  // mpNode = new CEvaluationNodeStructure(CEvaluationNode::SubType::VECTOR_CLOSE,
  //                                       yytext);
  // COMMON_ACTION;
  return TOKEN_STRUCTURE_VECTOR_CLOSE;

	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 637 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  BEGIN(sOPERATOR); 
  mpNode = new CEvaluationNodeVariable(CEvaluationNode::SubType::DEFAULT,
                                       yytext);
  COMMON_ACTION;
  return TOKEN_VARIABLE;

	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 645 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  mPosition += yyleng;
  // mpNode = new CEvaluationNodeWhiteSpace(CEvaluationNode::SubType::DEFAULT,
  //                                        yytext);
  // COMMON_ACTION;

	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(sSIGNorVALUE):
case YY_STATE_EOF(sOPERATOR):
case YY_STATE_EOF(sVALUE):
#line 652 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"
return 0;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 654 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"

  CCopasiMessage(CCopasiMessage::ERROR, MCFunction + 2, mPosition);
  return YYERRCODE;

	YY_BREAK
case 83:
YY_RULE_SETUP
#line 659 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"
ECHO;
	YY_BREAK
#line 1964 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	CEvaluationfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	CEvaluationfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					CEvaluationrealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) CEvaluationrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 402 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 402 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
	yy_is_jam = (yy_current_state == 401);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) CEvaluationalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) CEvaluationalloc((yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		CEvaluationfree((void *) b->yy_ch_buf  );

	CEvaluationfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)CEvaluationalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)CEvaluationrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) CEvaluationalloc(new_size  );

		else
			(yy_start_stack) = (int *) CEvaluationrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *CEvaluationalloc (yy_size_t  size )
{
			return malloc(size);
}

void *CEvaluationrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void CEvaluationfree (void * ptr )
{
			free( (char *) ptr );	/* see CEvaluationrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 659 "/io/build-system/git/COPASI.release/copasi/function/CEvaluationLexer.lpp"



